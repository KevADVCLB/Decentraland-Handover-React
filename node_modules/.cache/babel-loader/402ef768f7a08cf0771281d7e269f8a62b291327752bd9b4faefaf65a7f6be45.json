{"ast":null,"code":"var _jsxFileName = \"/Users/acdc/Documents/decentraland_react/Decentraland-Handover-React/src/components/AnimatedWords.js\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tagMap = {\n  paragraph: \"p\",\n  heading1: \"h1\",\n  heading2: \"h2\",\n  heading3: \"h3\"\n};\nconst AnimatedWords = props => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      opacity: 0,\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.85\n      }\n    },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.85\n      }\n    }\n  };\n  const splitWords = props.text.split(\" \");\n  const words = [];\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  }\n\n  // Add a space (\"\\u00A0\") to the end of each word\n  words.map(word => {\n    return word.push(\"\\u00A0\");\n  });\n\n  // Get the tag name from tagMap\n  const Tag = tagMap[props.type];\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    children: words.map((word, index) => {\n      return /*#__PURE__*/_jsxDEV(motion.span, {\n        style: {\n          overflow: \"hidden\",\n          display: \"inline-block\"\n        },\n        variants: item,\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_c = AnimatedWords;\nexport default AnimatedWords;\nvar _c;\n$RefreshReg$(_c, \"AnimatedWords\");","map":{"version":3,"names":["React","motion","jsxDEV","_jsxDEV","tagMap","paragraph","heading1","heading2","heading3","AnimatedWords","props","item","hidden","y","opacity","transition","ease","duration","visible","splitWords","text","split","words","entries","push","map","word","Tag","type","children","index","span","style","overflow","display","variants","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/acdc/Documents/decentraland_react/Decentraland-Handover-React/src/components/AnimatedWords.js"],"sourcesContent":["import React from \"react\";\nimport {motion} from \"framer-motion\";\n\nconst tagMap = {\n    paragraph: \"p\",\n    heading1: \"h1\",\n    heading2: \"h2\",\n    heading3: \"h3\"\n};\n\nconst AnimatedWords = (props) => {\n    // Framer Motion variant object, for controlling animation\n    const item = {\n        hidden: {\n            y: \"200%\",\n            opacity: 0,\n            transition: {ease: [0.455, 0.03, 0.515, 0.955], duration: 0.85}\n        },\n        visible: {\n            y: 0,\n            opacity: 1,\n            transition: {ease: [0.455, 0.03, 0.515, 0.955], duration: 0.85},\n        }\n    };\n\n    const splitWords = props.text.split(\" \");\n    const words = [];\n    for (const [, item] of splitWords.entries()) {\n        words.push(item.split(\"\"));\n    }\n\n    // Add a space (\"\\u00A0\") to the end of each word\n    words.map((word) => {\n        return word.push(\"\\u00A0\");\n    });\n\n    // Get the tag name from tagMap\n    const Tag = tagMap[props.type];\n\n    return (\n        <Tag>\n            {words.map((word, index) => {\n                return (\n\n                    <motion.span\n                        style={{\n                            overflow: \"hidden\",\n                            display: \"inline-block\"\n                        }} variants={item}\n                    >\n                        {word}\n                    </motion.span>\n                );\n            })}\n            {/* {} */}\n        </Tag>\n    );\n};\n\nexport default AnimatedWords;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,MAAM,GAAG;EACXC,SAAS,EAAE,GAAG;EACdC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC7B;EACA,MAAMC,IAAI,GAAG;IACTC,MAAM,EAAE;MACJC,CAAC,EAAE,MAAM;MACTC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAE;QAACC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QAAEC,QAAQ,EAAE;MAAI;IAClE,CAAC;IACDC,OAAO,EAAE;MACLL,CAAC,EAAE,CAAC;MACJC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAE;QAACC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QAAEC,QAAQ,EAAE;MAAI;IAClE;EACJ,CAAC;EAED,MAAME,UAAU,GAAGT,KAAK,CAACU,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;EACxC,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,MAAM,GAAGX,IAAI,CAAC,IAAIQ,UAAU,CAACI,OAAO,EAAE,EAAE;IACzCD,KAAK,CAACE,IAAI,CAACb,IAAI,CAACU,KAAK,CAAC,EAAE,CAAC,CAAC;EAC9B;;EAEA;EACAC,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAK;IAChB,OAAOA,IAAI,CAACF,IAAI,CAAC,QAAQ,CAAC;EAC9B,CAAC,CAAC;;EAEF;EACA,MAAMG,GAAG,GAAGvB,MAAM,CAACM,KAAK,CAACkB,IAAI,CAAC;EAE9B,oBACIzB,OAAA,CAACwB,GAAG;IAAAE,QAAA,EACCP,KAAK,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEI,KAAK,KAAK;MACxB,oBAEI3B,OAAA,CAACF,MAAM,CAAC8B,IAAI;QACRC,KAAK,EAAE;UACHC,QAAQ,EAAE,QAAQ;UAClBC,OAAO,EAAE;QACb,CAAE;QAACC,QAAQ,EAAExB,IAAK;QAAAkB,QAAA,EAEjBH;MAAI;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACK;IAEtB,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEA;AAEd,CAAC;AAACC,EAAA,GA/CI/B,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}